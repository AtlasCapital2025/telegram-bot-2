import logging
import os
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputFile,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import telegram

TOKEN = os.environ.get("TOKEN", "7682858607:AAHRRibwvtX5YnJYA3Z_SFGhdIx9z906eIQ")

CHANNEL_USERNAME = "@atlascapitalnews"
GUIDE_FILE_PATH = "6 —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞.pdf"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

reply_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton("–°—Ç–∞—Ä—Ç")]],
    resize_keyboard=True
)

async def show_start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å! –ù–∞–∂–º–∏—Ç–µ ¬´–°—Ç–∞—Ä—Ç¬ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.",
        reply_markup=reply_keyboard
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_start_menu(update, context)

async def send_file_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cwd = os.getcwd()
    await update.message.reply_text(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {cwd}")

    file_exists = os.path.isfile(GUIDE_FILE_PATH)
    await update.message.reply_text(f"–§–∞–π–ª '{GUIDE_FILE_PATH}' –Ω–∞–π–¥–µ–Ω: {file_exists}")

    if file_exists:
        try:
            with open(GUIDE_FILE_PATH, "rb") as pdf_file:
                input_file = InputFile(pdf_file, filename="6 —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞.pdf")
                await update.message.reply_document(document=input_file)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
    else:
        await update.message.reply_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ PDF –≤ –ø–∞–ø–∫–µ –±–æ—Ç–∞.")

async def handle_start_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ ¬´–°—Ç–∞—Ä—Ç¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    inline_keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    "üì• –ü–æ–ª—É—á–∏—Ç—å ¬´6 —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞¬ª",
                    callback_data="get_guide"
                )
            ],
            [
                InlineKeyboardButton(
                    "üì≤ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                    url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data="check_subscription"
                )
            ],
        ]
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)

async def button_get_guide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´get_guide¬ª –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç—å ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.
    """
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥, –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.")

async def check_subscription_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è ¬´check_subscription¬ª.
    """
    query = update.callback_query
    await query.answer()
    user = update.effective_user
    await check_subscription(query.message, context, user.id)

async def check_subscription(target, context, user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ user_id –Ω–∞ –∫–∞–Ω–∞–ª CHANNEL_USERNAME.
    –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF, –∏–Ω–∞—á–µ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.
    """
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        if member.status in ["member", "administrator", "creator"]:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
            with open(GUIDE_FILE_PATH, "rb") as pdf_file:
                input_file = InputFile(pdf_file, filename="6 —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞.pdf")
                await target.reply_document(document=input_file)
            await target.reply_text(
                "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!\n"
                "–í—ã—Å—ã–ª–∞–µ–º –≤–∞–º ¬´6 —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞¬ª!\n\n"
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–µ–∂–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ."
            )
        else:
            raise telegram.error.BadRequest("User not subscribed")
    except telegram.error.BadRequest:
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üì≤ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                        url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                        callback_data="check_subscription"
                    )
                ],
            ]
        )
        await target.reply_text(
            "üìå –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=keyboard
        )

def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))

    application.add_handler(CommandHandler("filetest", send_file_test))

    application.add_handler(CallbackQueryHandler(button_get_guide, pattern="get_guide"))
    application.add_handler(CallbackQueryHandler(check_subscription_button, pattern="check_subscription"))

    application.add_handler(
        MessageHandler(filters.TEXT & filters.Regex("^–°—Ç–∞—Ä—Ç$"), handle_start_button)
    )

    application.add_handler(
        MessageHandler(
            filters.TEXT & filters.ChatType.PRIVATE & ~filters.Regex("^–°—Ç–∞—Ä—Ç$"),
            start
        )
    )

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
